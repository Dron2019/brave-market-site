@use "sass:math";
@mixin font-face($font-family, $url, $weight: normal, $style: normal, $asset-pipeline: false) {
	@font-face {
		font-family: '#{$font-family}';
		font-weight: #{$weight};
		font-style: '#{$style}';

		src: url('#{$url}.eot');
		src: url('#{$url}.eot?#iefix') format('embedded-opentype'),
		url('#{$url}.woff') format('woff'),
		url('#{$url}.ttf') format('truetype');

	}
}

// Function for converting a px based font-size to rem.
@function rem($size) {
	$remSize: $size / 14px;
	@return #{$remSize}rem;
}

@mixin toh($max_height) {
	@media screen and (max-height: $max_height) {
		@content;
	}
}


@function max($numbers...) {

	@return m#{a}x(#{$numbers})
}

;

@function min($numbers...) {

	@return m#{i}n(#{$numbers})
}

;


$full-width: 1200;
$work-width: 80;
$screen-height: 720;

@function vmax($pixels, $context: $full-width) {
	@return #{($pixels/$context)* 100}vmax
}
;

@function vw($pixels, $context: $full-width) {
	@return  #{($pixels/$context)* 100}vw
}

@function lh($lh, $fz) {
	@return #{($lh/$fz)}em
}

@for $i from 1 through 10 {
	.opacity-#{$i} {
		opacity: math.div($i, 10);
	}
}


@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {

	// For Google Chrome
	&::-webkit-scrollbar {
		width: $size;
		height: $size;
		cursor: pointer;
	}

	&::-webkit-scrollbar-thumb {
		background: $foreground-color;
		border-radius: var(--space-2);
		cursor: pointer;
	}

	&::-webkit-scrollbar-track {
		background: $background-color;
	}

	// For Internet Explorer
	& {
		scrollbar-face-color: $foreground-color;
		scrollbar-track-color: $background-color;
	}
}